@page "/studysessions"
@using Microsoft.AspNetCore.Authorization
@using StudentHub.Shared

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<link href="StudySessions.razor.css" rel="stylesheet">
<h3>Your Study Sessions</h3>
<button @onclick="ShowNewChatPopup">New Chat</button>
    <CreateChatPopUp @ref="createChatPopup"/>

@if (studySessions.Count == 0)
{
    <p>You have no study sessions</p>
    <br/>
    <p>Click the button above to create one!</p>
}
else
{
    <div class="chat-tiles">
        @foreach (var studySession in studySessions.OrderByDescending(s => s.LastMessageTimeStamp))
        {
            <div class="chat-tile" @onclick="() => NavigateToChat(studySession)">
                <i class="fas fa-times delete-icon" 
                   @onclick="@(e => DeleteSession(studySession.id))"
                   @onclick:stopPropagation></i>                
                <h5>@studySession.SessionName</h5>
                <p>File: @studySession.FileName</p>
                <p>@studySession.LastMessageTimeStamp</p>
            </div>
        }
    </div>
}

@code {
    private List<StudySession> studySessions = new();
    string? userGuid;

    private CreateChatPopUp createChatPopup;

    private void ShowNewChatPopup()
    {
        createChatPopup.Show(userGuid);
    }
    
    private async Task DeleteSession(string studySessionId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this session?");
        if (confirmed)
        {
            var response = await Http.DeleteAsync($"octolearnapi/StudySession/deletesession/{studySessionId}/{userGuid}");
            if (response.IsSuccessStatusCode)
            {
                studySessions.RemoveAll(s => s.id == studySessionId); // Remove the session from the local list
                StateHasChanged(); // Refresh the component
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            userGuid = await Http.GetStringAsync($"User/GetUserId?userName={authState.User.Identity?.Name}");
            studySessions = await Http.GetFromJsonAsync<List<StudySession>>($"octolearnapi/StudySession/getallsessions?userGuid={userGuid}") ?? new List<StudySession>();
        }
        catch (Exception e)
        {
            studySessions = new List<StudySession>();
            Console.WriteLine($"Error fetching study sessions: {e.Message}");
        }
    }

    private void NavigateToChat(StudySession studySession)
    {
    // Trigger embeddings generation and wait for it to complete
        _ = Http.GetAsync($"octolearnapi/AiTools/generateEmbeddings/{studySession.id}/{studySession.UserId}");

    // Navigate to the chat page
        NavigationManager.NavigateTo($"/chat/{studySession.id}");
    }

}

