@page "/chat"
@using StudentHub.Shared
@using System.Text
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers
@attribute [Authorize]

@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
<style>
    body, html {
        font-family: 'Arial', sans-serif;
        margin: 0;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    h3 {
        color: #ffffff;
        background-color: #5d3b8e; /* Cyberpunk Purple */
        text-align: center;
        padding: 1rem;
        margin: 0;
    }

    .chat-container {
        flex: 1;
        height: 95%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        background-color: #1e1e2f; /* Dark background for chat */
        padding: 20px;
        border-radius: 10px;
        margin: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        color: #ffffff;
    }

    .messages-area {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
    }

    .chat-message {
        background-color: #252545; /* Slightly lighter background for messages */
        padding: 10px 15px;
        border-radius: 10px;
        margin-bottom: 10px;
    }

    .message-user {
        font-weight: bold;
        color: #00b894; /* Spotify Green */
    }

    .message-text {
        color: #d7d7d7; /* Light text for readability */
    }

    .input-area {
        display: flex;
        align-items: center;
        padding-top: 10px;
    }

    .upload-button {
        background-color: #00b894; /* Spotify Green */
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        margin-right: 10px;
        cursor: pointer;
    }

    .upload-button:hover {
        background-color: #019568;
    }

    .chat-input {
        flex-grow: 1;
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ddd;
        background-color: #1e1e2f; /* Match chat background */
        color: #d7d7d7; /* Light text for readability */
        margin-right: 10px;
    }

    .send-button {
        background-color: #00b894; /* Spotify Green */
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
    }

    .send-button:hover {
        background-color: #019568;
    }
</style>

<h3>Chat with AI @sessionName</h3>
<div class="chat-container">
    <div class="messages-area">
        @foreach (var message in messages)
        {
            <div class="chat-message">
                <span class="message-user">@message.UserId</span>: <span class="message-text">@message.Message</span>
            </div>
        }
    </div>
    <div class="input-area">
        <InputFile OnChange="SelectFile" class="input-file"/>
        <button class="upload-button"
                @onclick="UploadFile">
            Upload
        </button>
        <input class="chat-input" @bind="newMessage"/>
        <button class="send-button" @onclick="SendMessage">Send</button>
    </div>
</div>


@code {
    private List<ChatMessage>? messages = new();
    private long maxFileSize = 1024 * 1024 * 3;
    private string newMessage;
    private AuthenticationState authState;
    private string userId = "";
    private bool fileUploaded = false;
    string? userGuid;
    private string sessionName = "";

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        messages = await Http.GetFromJsonAsync<List<ChatMessage>>($"Chat/GetMessages?userId={authState.User.Identity?.Name}");
        userGuid = await Http.GetStringAsync($"User/GetUserId?userName={authState.User.Identity?.Name}");
    }

    private async Task SendMessage()
    {
        var message = new ChatMessage
        {
            UserId = "You",
            Message = newMessage,
            Timestamp = DateTime.Now,
            SessionId = selectedFile.Name.GetHashCode().ToString()
        };
        messages?.Add(message);
        await GetResponse();
    }

    private async Task GetResponse()
    {
        var content = new StringContent(newMessage, Encoding.UTF8, "text/plain");
        var response = await Http.PostAsync($"octolearnapi/AiTools/sendChat?studySessionId={selectedFile.Name.GetHashCode()}&userGuid={userGuid}", content);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Success");
            string responseMessage = await response.Content.ReadAsStringAsync();
            var chatResponse = new ChatMessage
            {
                UserId = "Pookie bot",
                Message = responseMessage,
                Timestamp = DateTime.Now,
                SessionId = selectedFile.Name.GetHashCode().ToString()
            };
            messages?.Add(chatResponse);
        }
        else
        {
            Console.WriteLine("Error");
        }
        newMessage = "";
    }

    private IBrowserFile? selectedFile;

    // Uploading a file to the DB
    private Task SelectFile(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        return Task.CompletedTask;
    }

    private async Task UploadFile()
    {
        if (selectedFile != null)
        {
    // Update session name with file name
            sessionName = $" - reading {selectedFile.Name}";

            await using var stream = selectedFile.OpenReadStream();
            using var content = new MultipartFormDataContent();
            using var fileContent = new StreamContent(stream);

            fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
            {
                Name = "file",
                FileName = selectedFile.Name
            };

            content.Add(fileContent);

            await Http.PostAsync($"octolearnapi/StudySession/makesession?sessionName={selectedFile.Name.GetHashCode()}&userGuid={userGuid}", content);

    // Trigger the UI to update
            StateHasChanged();
        }
    }

}