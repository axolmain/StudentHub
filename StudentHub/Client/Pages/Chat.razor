@page "/chat/{sessionId}"

@using StudentHub.Shared
@using System.Text
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<style>
    h3 {
        color: #333;
        background-color: #ffffff; /* White background for the header */
        text-align: left;
        padding: 1rem 2rem;
        margin: 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Soft shadow for depth */
    }
    
    .chat-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        background-color: #ffffff; /* White background for chat */
        padding: 20px;
        border-radius: 10px;
        margin: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Consistent shadow for depth */
        color: #333;
        height: 85vh;
    }
    
    .messages-area {
        flex-grow: 1;
        height: 85vh;
        overflow-y: auto;
        padding: 10px;
        background-color: #e9ecef; /* Lighter grey background for messages area */
        border-radius: 8px; /* Slightly rounded corners for the chat area */
    }
    
    .chat-message {
        background-color: #ffffff; /* White background for messages */
        padding: 10px 15px;
        border-radius: 15px;
        margin-bottom: 10px;
        border: 1px solid #e3e3e3; /* Slight border for message bubbles */
        word-wrap: break-word; /* Ensure long words do not overflow */
        max-width: calc(100% - 30px); /* Adjust max-width considering padding */
    }
    
    .message-user {
        font-weight: 600;
        color: #5d3b8e; /* Purple color for usernames */
    }
    
    .message-text {
        color: #333; /* Dark grey color for text for better readability */
    }
    
    .input-area {
        display: flex;
        align-items: center;
        padding: 10px;
    }
    
    .chat-input {
        flex-grow: 1;
        padding: 10px;
        border-radius: 20px;
        border: 2px solid #5d3b8e; /* Purple border for the input */
        background-color: #ffffff; /* White background for the input */
        color: #333; /* Dark text for input */
        margin-right: 10px;
    }
    
    .send-button {
        background-color: #5d3b8e; /* Purple background for the send button */
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 20px; /* Rounded corners for buttons */
        cursor: pointer;
        box-sizing: border-box; /* Include padding and border in the element's total width and height */
    }
    
    .send-button:hover {
        background-color: #4c2f76; /* Slightly darker purple for the hover effect */
    }
    
    .loading {
      font-weight: bold;
      display:inline-block;
      font-family: monospace;
      clip-path: inset(0 3ch 0 0);
      animation: l 1s steps(4) infinite;
    }
    
    @@keyframes l {
      to {
        clip-path: inset(0 -1ch 0 0)
      }
    }
</style>

<h3>@sessionName</h3>
@if (!memoryCreated)
{
    <div class="loading">Generating Embeddings...</div>
}
<div class="study-session">
    <div class="chat-container">
        <div class="messages-area">
            @foreach (var message in messages)
            {
                <div class="chat-message">
                    <div class="message-user">@message.UserId</div>
                    <div class="message-text">@message.Message</div>
                </div>
            }
            
            @* The loading indicator is now outside of the foreach loop *@
            @if (isLoading)
            {
                <div class="loading">Generating response...</div>
            }
        </div>
        <div class="input-area">
            <input class="chat-input" placeholder="Type your message here..." 
                   @bind="newMessage" @onkeydown="EnterMessage" name="inputArea"/>
            <button class="send-button" @onclick="SendMessage">Send</button>
        </div>
    </div>
</div>

<script>
    function scrollToBottom() {
        var messageArea = document.querySelector('.messages-area');
        if (messageArea) {
            messageArea.scrollTop = messageArea.scrollHeight;
        }
    }
</script>

@code {
    [Parameter] public string SessionId { get; set; }
    private List<ChatMessage> messages = new();
    private string newMessage;
    private IBrowserFile? selectedFile;
    private string sessionName = "";
    private AuthenticationState authState;
    string? userId;
    private bool isLoading;
    private bool memoryCreated;
    private HubConnection _hubConnection;


    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = await Http.GetStringAsync($"User/GetUserId?userName={authState.User.Identity?.Name}");
        _ = LoadSessionMessages();
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/embeddingsHub"))
            .WithAutomaticReconnect() // Enable automatic reconnection
            .Build();

        _hubConnection.On("EmbeddingsGenerated", async () =>
        {
            if (!messages.Any())
            {
                memoryCreated = true;
                await InvokeAsync(StateHasChanged); // Refresh UI
            }
            await _hubConnection.DisposeAsync();
            
        });

        await _hubConnection.StartAsync();
        await CheckEmbeddingsStatus();
    }
    
    private async Task CheckEmbeddingsStatus()
    {
        var response = await Http.GetAsync($"octolearnapi/AiTools/checkEmbeddings/{SessionId}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            memoryCreated = bool.Parse(content);

            if (memoryCreated && !messages.Any())
            {
                await LoadSessionMessages(); // Load messages if embeddings are already created
            }
        }
        else
        {
            Console.WriteLine("Error checking embeddings status.");
        }
    }
    
    private async Task SaveChat()
    {
        try
        {
            var content = new StringContent(JsonSerializer.Serialize(messages), Encoding.UTF8, "application/json");
            var response = await Http.PostAsync($"Chat/SaveChatSession?sessionId={SessionId}&userId={userId}", content);

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine("Error saving chat session to the server.");
            }
            else
            {
                Console.WriteLine("Chat session saved successfully.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while saving chat session: {ex.Message}");
        }
    }
    
    private async Task LoadSessionMessages()
    {
        try
        {
            messages = await Http.GetFromJsonAsync<List<ChatMessage>>($"Chat/GetSessionMessages?sessionId={SessionId}&userId={userId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading session messages: {ex.Message}");
        }
    }
    
    private async Task SendMessage()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(newMessage) || isLoading || !memoryCreated)
                return;
            
            var messageToSend = newMessage;
            newMessage = ""; // Clear message
            var message = new ChatMessage
            {
                UserId = "You", // Consider using the actual user's name or identifier
                Message = messageToSend,
                Timestamp = DateTime.Now,
                SessionId = SessionId
            };

            messages.Add(message);
            
            isLoading = true; // Indicate loading
            await PostMessage(messageToSend);
            isLoading = false;
            await JSRuntime.InvokeVoidAsync("scrollToBottom");
            await Task.Run(SaveChat);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending message: {ex.Message}");
            // Handle error
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom");
        }
    }

    private async Task PostMessage(string messageToSend)
    {
        var chatMessage = new
        {
            message = messageToSend // Assuming newMessage is the message you want to send
        };

        var jsonContent = new StringContent(JsonSerializer.Serialize(chatMessage), Encoding.UTF8, "application/json");

        var response = await Http.PostAsync($"octolearnapi/AiTools/sendChat/{SessionId}/{userId}", jsonContent);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Success");
            string responseMessage = await response.Content.ReadAsStringAsync();
            var chatResponse = new ChatMessage
            {
                UserId = "Pookie bot",
                Message = responseMessage,
                Timestamp = DateTime.Now,
                SessionId = SessionId
            };
            messages?.Add(chatResponse);
        }
        else
        {
            Console.WriteLine("Error sending message to server.");
        }
        newMessage = "";
    }

    private async Task EnterMessage(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            await SendMessage();
    }

}
