@page "/chat/{sessionId}"
@using StudentHub.Shared
@using System.Text
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    body, html {
        font-family: 'Arial', sans-serif;
        margin: 0;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    h3 {
        color: #ffffff;
        background-color: #5d3b8e; /* Cyberpunk Purple */
        text-align: center;
        padding: 1rem;
        margin: 0;
    }

    .chat-container {
        flex: 1;
        height: 84vh;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        background-color: #1e1e2f; /* Dark background for chat */
        padding: 20px;
        border-radius: 10px;
        margin: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        color: #ffffff;
    }

    .messages-area {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
    }

    .chat-message {
        background-color: #252545; /* Slightly lighter background for messages */
        padding: 10px 15px;
        border-radius: 10px;
        margin-bottom: 10px;
    }

    .message-user {
        font-weight: bold;
        color: #00b894; /* Spotify Green */
    }

    .message-text {
        color: #d7d7d7; /* Light text for readability */
    }

    .input-area {
        display: flex;
        align-items: center;
        padding-top: 10px;
    }

    .upload-button {
        background-color: #00b894; /* Spotify Green */
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        margin-right: 10px;
        cursor: pointer;
    }

    .upload-button:hover {
        background-color: #019568;
    }

    .chat-input {
        flex-grow: 1;
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ddd;
        background-color: #1e1e2f; /* Match chat background */
        color: #d7d7d7; /* Light text for readability */
        margin-right: 10px;
    }

    .send-button {
        background-color: #00b894; /* Spotify Green */
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
    }

    .send-button:hover {
        background-color: #019568;
    }
</style>

<h3>Chat with AI @sessionName</h3>
<div class="chat-container">
    <div class="messages-area">
        @if (messages != null)
        {
            @foreach (var message in messages)
            {
                <div class="chat-message">
                    <span class="message-user">@message.UserId</span>: <span class="message-text">@message.Message</span>
                </div>
            }
        }
    </div>
    <div class="input-area">
        <button class="save-chat-button" @onclick="SaveChat">Save Chat</button>
        <input class="chat-input" @bind="newMessage"/>
        <button class="send-button" @onclick="SendMessage">Send</button>
    </div>
</div>

@code {
    [Parameter] public string SessionId { get; set; }
    private List<ChatMessage> messages = new();
    private string newMessage;
    private IBrowserFile? selectedFile;
    private string sessionName = "";
    private AuthenticationState authState;
    string? userId;
    
    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = await Http.GetStringAsync($"User/GetUserId?userName={authState.User.Identity?.Name}");
        await FetchMessages(); // Existing call to fetch messages
        await LoadSessionMessages(); // New call to load session messages
    }
    private async Task SaveChat()
    {
        try
        {
            var content = new StringContent(JsonSerializer.Serialize(messages), Encoding.UTF8, "application/json");
            var response = await Http.PostAsync($"Chat/SaveChatSession?sessionId={SessionId}&userId={userId}", content);

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine("Error saving chat session to the server.");
            }
            else
            {
                Console.WriteLine("Chat session saved successfully.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while saving chat session: {ex.Message}");
        }
    }
    
    private async Task LoadSessionMessages()
    {
        try
        {
            messages = await Http.GetFromJsonAsync<List<ChatMessage>>($"Chat/GetSessionMessages?sessionId={SessionId}&userId={userId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading session messages: {ex.Message}");
    // Handle error (e.g., show a notification to the user)
        }
    }

    private async Task FetchMessages()
    {
        try
        {
            messages = await Http.GetFromJsonAsync<List<ChatMessage>>($"Chat/GetMessages?sessionId={SessionId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching messages: {ex.Message}");
            // Handle error (e.g., show a notification to the user)
        }
    }

    private async Task SendMessage()
    {
        try
        {
            var message = new ChatMessage
            {
                UserId = "You", // Consider using the actual user's name or identifier
                Message = newMessage,
                Timestamp = DateTime.Now,
                SessionId = SessionId
            };

            messages.Add(message);
            

            await PostMessage();
            newMessage = ""; // Clear message after sending
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending message: {ex.Message}");
            // Handle error
        }
    }

    private async Task PostMessage()
    {
        var chatMessage = new
        {
            message = newMessage // Assuming newMessage is the message you want to send
        };

        var jsonContent = new StringContent(JsonSerializer.Serialize(chatMessage), Encoding.UTF8, "application/json");

        var response = await Http.PostAsync($"octolearnapi/AiTools/sendChat/{SessionId}/{userId}", jsonContent);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Success");
            string responseMessage = await response.Content.ReadAsStringAsync();
            var chatResponse = new ChatMessage
            {
                UserId = "Pookie bot",
                Message = responseMessage,
                Timestamp = DateTime.Now,
                SessionId = SessionId
            };
            messages?.Add(chatResponse);
        }
        else
        {
            Console.WriteLine("Error sending message to server.");
        }
        newMessage = "";
    }

    private async Task UploadFile()
    {
        if (selectedFile != null)
        {
            try
            {
                // File upload logic
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error uploading file: {ex.Message}");
                // Handle error
            }
        }
    }

    private Task SelectFile(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        return Task.CompletedTask;
    }
}
