@using System.Net.Http.Headers
@using System.Text.Encodings.Web
@using System.Web
@using System.Text.Json
@using StudentHub.Shared
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager

<link href="CreateChatPopup.razor.css" rel="stylesheet">

@if (IsVisible)
{
    <div class="popup-overlay">
        <div class="popup-content">
            <h2>Start New Chat</h2>
            <div class="file-input-container">
                <InputFile OnChange="SelectFile" accept=".doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/pdf,text/plain"/>
            </div>
            <label for="chatName">Chat name:</label>
            <input type="text" @bind="ChatName" placeholder="Chat name..." id="chatName">
            <label for="chatDescription">Chat description:</label>
            <textarea @bind="ChatDescription" placeholder="Describe your chat..." id="chatDescription"></textarea>
            <button @onclick="StartChat">Start Chat</button>
            <button @onclick="Cancel">Cancel</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<bool> OnChatCreated { get; set; }
    
    private string userId { get; set; }
    private bool IsVisible { get; set; }
    private string ChatDescription { get; set; }
    private IBrowserFile SelectedFile { get; set; }
    public StudySession Session { get; set; }
    public string? ChatName { get; set; }

    public void Show(string userId)
    {
        this.userId = userId;
        IsVisible = true;
        StateHasChanged();
    }

    private IBrowserFile? selectedFile;

    private Task SelectFile(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        var acceptedFileTypes = new[] { ".pdf", ".doc", ".docx", ".txt" };
        if (acceptedFileTypes.All(s => s != Path.GetExtension(selectedFile.Name).ToLowerInvariant()))
        {
            JSRuntime.InvokeVoidAsync("alert", "Please select a valid file type (.pdf, .doc, .docx, .txt)");
            selectedFile = null;
        }
        else if (selectedFile.Size > 51200000L)
        {
            JSRuntime.InvokeVoidAsync("alert", "Please select a file smaller than 50MB");
            selectedFile = null;
        }
        return Task.CompletedTask;
    }

    private bool creatingChat;

    private async Task StartChat()
    {
        if (selectedFile != null & !creatingChat)
        {
            creatingChat = true;
            await using var stream = selectedFile.OpenReadStream(maxAllowedSize:51200000L);
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(stream);

            fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
            {
                Name = "files", // This should be 'files', as the API expects a list rn.
                FileName = selectedFile.Name
            };

            content.Add(fileContent);
            content.Add(new StringContent(userId), "userId"); // Ensure the parameter name matches with the API
            content.Add(new StringContent(ChatName ?? "New Chat"), "sessionName"); // Ensure the parameter name matches with the API

            var makeSession = await Http.PostAsync("octolearnapi/StudySession/makesession", content);

            var sessionId = await makeSession.Content.ReadAsStringAsync();
            var response = await Http.GetAsync($"octolearnapi/StudySession/getsession/?sessionId={sessionId}&userId={userId}");
            Session = await response.Content.ReadFromJsonAsync<StudySession>();
            Http.GetAsync($"octolearnapi/AiTools/generateEmbeddings/{Session.id}/{userId}");

            
            // Reset fields
            ChatDescription = string.Empty;
            SelectedFile = null;

            StateHasChanged();
            string chatId = Session.id;
            creatingChat = false;
            NavigationManager.NavigateTo($"/chat/{chatId}");
        }
    }

    private void Cancel()
    {
        IsVisible = false;
        ChatDescription = string.Empty;
        SelectedFile = null;
        StateHasChanged();
    }
}